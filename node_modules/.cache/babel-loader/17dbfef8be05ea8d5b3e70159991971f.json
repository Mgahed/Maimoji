{"ast":null,"code":"import * as faceapi from 'face-api.js'; // Load models and weights\n\nexport async function loadModels() {\n  const MODEL_URL = process.env.PUBLIC_URL + '/models';\n  await faceapi.loadTinyFaceDetectorModel(MODEL_URL);\n  await faceapi.loadFaceLandmarkTinyModel(MODEL_URL);\n  await faceapi.loadFaceRecognitionModel(MODEL_URL);\n  await faceapi.loadFaceExpressionModel(MODEL_URL); // alert(MODEL_URL)\n}\nvar neutral = \"-1\";\nvar happy = \"-1\";\nvar sad = \"-1\";\nexport async function getFullFaceDescription(blob, inputSize = 512) {\n  // const detections = await faceapi.detectAllFaces(blob, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\n  // const resizedDetections = faceapi.resizeResults(detections, inputSize);\n  // var neutral = detections[0].expressions.neutral;\n  // console.log(neutral)\n  // var happy = detections[0].expressions.happy;\n  // var sad = detections[0].expressions.sad;\n  // tiny_face_detector options;\n  let scoreThreshold = 0.5;\n  const OPTION = new faceapi.TinyFaceDetectorOptions({\n    inputSize,\n    scoreThreshold\n  }); // const useTinyModel = true;\n  // fetch image to api\n\n  let img = await faceapi.fetchImage(blob); // detect all faces and generate full description from image\n  // including landmark and descriptor of each face\n\n  let fullDesc = await faceapi.detectAllFaces(img, OPTION).withFaceExpressions();\n  console.log(fullDesc);\n\n  try {\n    neutral = fullDesc[0].expressions.neutral;\n    happy = fullDesc[0].expressions.happy;\n    sad = fullDesc[0].expressions.sad;\n    sessionStorage.setItem(\"neutral\", neutral);\n    sessionStorage.setItem(\"happy\", happy);\n    sessionStorage.setItem(\"sad\", sad);\n    console.log(\"neutarl = \" + neutral);\n    console.log(\"happy = \" + happy);\n    console.log(\"sad = \" + sad);\n  } catch {\n    console.log(\"No Dedection\");\n    sessionStorage.setItem(\"neutral\", neutral);\n    sessionStorage.setItem(\"happy\", happy);\n    sessionStorage.setItem(\"sad\", sad);\n    console.log(\"no neutarl = \" + neutral);\n    console.log(\"no happy = \" + happy);\n    console.log(\"no sad = \" + sad);\n  }\n\n  return fullDesc;\n}\nconst maxDescriptorDistance = 0.5;\nexport async function createMatcher(faceProfile) {\n  // Create labeled descriptors of member from profile\n  let members = Object.keys(faceProfile);\n  let labeledDescriptors = members.map(member => new faceapi.LabeledFaceDescriptors(faceProfile[member].name, faceProfile[member].descriptors.map(descriptor => new Float32Array(descriptor)))); // Create face matcher (maximum descriptor distance is 0.5)\n\n  let faceMatcher = new faceapi.FaceMatcher(labeledDescriptors, maxDescriptorDistance);\n  return faceMatcher;\n}","map":{"version":3,"sources":["D:/aastproject/Maimoji/src/api/face.js"],"names":["faceapi","loadModels","MODEL_URL","process","env","PUBLIC_URL","loadTinyFaceDetectorModel","loadFaceLandmarkTinyModel","loadFaceRecognitionModel","loadFaceExpressionModel","neutral","happy","sad","getFullFaceDescription","blob","inputSize","scoreThreshold","OPTION","TinyFaceDetectorOptions","img","fetchImage","fullDesc","detectAllFaces","withFaceExpressions","console","log","expressions","sessionStorage","setItem","maxDescriptorDistance","createMatcher","faceProfile","members","Object","keys","labeledDescriptors","map","member","LabeledFaceDescriptors","name","descriptors","descriptor","Float32Array","faceMatcher","FaceMatcher"],"mappings":"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","sourcesContent":["import * as faceapi from 'face-api.js';\r\n\r\n// Load models and weights\r\nexport async function loadModels() {\r\n  const MODEL_URL = process.env.PUBLIC_URL + '/models';\r\n  await faceapi.loadTinyFaceDetectorModel(MODEL_URL);\r\n  await faceapi.loadFaceLandmarkTinyModel(MODEL_URL);\r\n  await faceapi.loadFaceRecognitionModel(MODEL_URL);\r\n  await faceapi.loadFaceExpressionModel(MODEL_URL);\r\n  // alert(MODEL_URL)\r\n}\r\nvar neutral = \"-1\";\r\nvar happy = \"-1\";\r\nvar sad = \"-1\";\r\nexport async function getFullFaceDescription(blob, inputSize = 512) {\r\n  // const detections = await faceapi.detectAllFaces(blob, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\r\n  // const resizedDetections = faceapi.resizeResults(detections, inputSize);\r\n  // var neutral = detections[0].expressions.neutral;\r\n  // console.log(neutral)\r\n  // var happy = detections[0].expressions.happy;\r\n  // var sad = detections[0].expressions.sad;\r\n  // tiny_face_detector options;\r\n  let scoreThreshold = 0.5;\r\n  const OPTION = new faceapi.TinyFaceDetectorOptions({\r\n    inputSize,\r\n    scoreThreshold\r\n  });\r\n  // const useTinyModel = true;\r\n\r\n  // fetch image to api\r\n  let img = await faceapi.fetchImage(blob);\r\n\r\n  // detect all faces and generate full description from image\r\n  // including landmark and descriptor of each face\r\n  let fullDesc = await faceapi\r\n    .detectAllFaces(img, OPTION)\r\n    .withFaceExpressions();\r\n\r\n  console.log(fullDesc)\r\n  try {\r\n    neutral = fullDesc[0].expressions.neutral;\r\n    happy = fullDesc[0].expressions.happy;\r\n    sad = fullDesc[0].expressions.sad;\r\n    sessionStorage.setItem(\"neutral\",neutral)\r\n    sessionStorage.setItem(\"happy\",happy)\r\n    sessionStorage.setItem(\"sad\",sad)\r\n    console.log(\"neutarl = \" + neutral)\r\n    console.log(\"happy = \" + happy)\r\n    console.log(\"sad = \" + sad)\r\n  } catch{ console.log(\"No Dedection\")\r\n  sessionStorage.setItem(\"neutral\",neutral)\r\n  sessionStorage.setItem(\"happy\",happy)\r\n  sessionStorage.setItem(\"sad\",sad)\r\n  console.log(\"no neutarl = \" + neutral)\r\n  console.log(\"no happy = \" + happy)\r\n  console.log(\"no sad = \" + sad)\r\n }\r\n  return fullDesc;\r\n}\r\n\r\nconst maxDescriptorDistance = 0.5;\r\nexport async function createMatcher(faceProfile) {\r\n  // Create labeled descriptors of member from profile\r\n  let members = Object.keys(faceProfile);\r\n  let labeledDescriptors = members.map(\r\n    member =>\r\n      new faceapi.LabeledFaceDescriptors(\r\n        faceProfile[member].name,\r\n        faceProfile[member].descriptors.map(\r\n          descriptor => new Float32Array(descriptor)\r\n        )\r\n      )\r\n  );\r\n\r\n  // Create face matcher (maximum descriptor distance is 0.5)\r\n  let faceMatcher = new faceapi.FaceMatcher(\r\n    labeledDescriptors,\r\n    maxDescriptorDistance\r\n  );\r\n  return faceMatcher;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}